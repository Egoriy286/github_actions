import './App.css';
import React, { useState } from 'react';
//import { axios } from 'axios';
import 'katex/dist/katex.min.css';
import { BlockMath } from 'react-katex';

function App() {


  const [functionString, setFunctionString] = useState('x');
  const [a, setA] = useState('1');
  const [b, setB] = useState('2');
  const [result, setResult] = useState(null);

  const fetchData = async () => {
    const host = 'http://127.0.0.1:5000'; // Замените на ваш реальный хост
    const json = {
      function: functionString,
      a: parseFloat(a),
      b: parseFloat(b),
    };

    try {
      const response = await fetch(`${host}/calculate_integral`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(json),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const data = await response.json();
      setResult(data.result);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  return (
    <div className="App">
      <h1>Калькулятор вычисления интеграла</h1>
      <div>
        <label>
          <div className='parent-container'>
            <svg className="child-element" width="43" height="125" viewBox="0 0 43 125" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M35.7585 12V3.27273H37.5739V6.55398H37.6293C37.7088 6.37784 37.8239 6.19886 37.9744 6.01705C38.1278 5.83239 38.3267 5.67898 38.571 5.55682C38.8182 5.43182 39.125 5.36932 39.4915 5.36932C39.9688 5.36932 40.4091 5.49432 40.8125 5.74432C41.2159 5.99148 41.5384 6.36506 41.7798 6.86506C42.0213 7.36222 42.142 7.9858 42.142 8.7358C42.142 9.46591 42.0241 10.0824 41.7884 10.5852C41.5554 11.0852 41.2372 11.4645 40.8338 11.723C40.4332 11.9787 39.9844 12.1065 39.4872 12.1065C39.1349 12.1065 38.8352 12.0483 38.5881 11.9318C38.3438 11.8153 38.1435 11.669 37.9872 11.4929C37.831 11.3139 37.7116 11.1335 37.6293 10.9517H37.5483V12H35.7585ZM37.5355 8.72727C37.5355 9.11648 37.5895 9.45597 37.6974 9.74574C37.8054 10.0355 37.9616 10.2614 38.1662 10.4233C38.3707 10.5824 38.6193 10.6619 38.9119 10.6619C39.2074 10.6619 39.4574 10.581 39.6619 10.419C39.8665 10.2543 40.0213 10.027 40.1264 9.73722C40.2344 9.4446 40.2884 9.10795 40.2884 8.72727C40.2884 8.34943 40.2358 8.01705 40.1307 7.73011C40.0256 7.44318 39.8707 7.21875 39.6662 7.05682C39.4616 6.89489 39.2102 6.81392 38.9119 6.81392C38.6165 6.81392 38.3665 6.89205 38.1619 7.0483C37.9602 7.20455 37.8054 7.42614 37.6974 7.71307C37.5895 8 37.5355 8.33807 37.5355 8.72727Z" fill="black" />
              <path d="M35.5 19C29 21 13.5 29 19 62.5C24.7679 97.6319 7.16667 105.167 0.5 107.5" stroke="black" stroke-width="3" />
              <path d="M2.59091 122.124C2.1733 122.124 1.80114 122.051 1.47443 121.906C1.14773 121.759 0.889205 121.541 0.698864 121.254C0.511364 120.964 0.417614 120.604 0.417614 120.172C0.417614 119.808 0.484375 119.503 0.617898 119.256C0.75142 119.009 0.933239 118.81 1.16335 118.659C1.39347 118.509 1.65483 118.395 1.94744 118.318C2.2429 118.241 2.55256 118.188 2.87642 118.156C3.2571 118.116 3.56392 118.08 3.79688 118.045C4.02983 118.009 4.19886 117.955 4.30398 117.884C4.40909 117.812 4.46165 117.707 4.46165 117.568V117.543C4.46165 117.273 4.37642 117.064 4.20597 116.916C4.03835 116.768 3.79972 116.695 3.49006 116.695C3.16335 116.695 2.90341 116.767 2.71023 116.912C2.51705 117.054 2.3892 117.233 2.3267 117.449L0.647727 117.312C0.732955 116.915 0.900568 116.571 1.15057 116.281C1.40057 115.989 1.72301 115.764 2.1179 115.608C2.51563 115.449 2.97585 115.369 3.49858 115.369C3.86222 115.369 4.21023 115.412 4.54261 115.497C4.87784 115.582 5.17472 115.714 5.43324 115.893C5.6946 116.072 5.90057 116.303 6.05114 116.584C6.2017 116.862 6.27699 117.196 6.27699 117.585V122H4.5554V121.092H4.50426C4.39915 121.297 4.25852 121.477 4.08239 121.634C3.90625 121.787 3.6946 121.908 3.44744 121.996C3.20028 122.081 2.91477 122.124 2.59091 122.124ZM3.1108 120.871C3.37784 120.871 3.61364 120.818 3.81818 120.713C4.02273 120.605 4.18324 120.46 4.29972 120.278C4.41619 120.097 4.47443 119.891 4.47443 119.661V118.966C4.41761 119.003 4.33949 119.037 4.24006 119.068C4.14347 119.097 4.03409 119.124 3.91193 119.149C3.78977 119.172 3.66761 119.193 3.54545 119.213C3.4233 119.23 3.3125 119.246 3.21307 119.26C3 119.291 2.81392 119.341 2.65483 119.409C2.49574 119.477 2.37216 119.57 2.28409 119.686C2.19602 119.8 2.15199 119.942 2.15199 120.112C2.15199 120.359 2.24148 120.548 2.42045 120.679C2.60227 120.807 2.83239 120.871 3.1108 120.871Z" fill="black" />
            </svg>
            <input className="child-element text-auto-width marwid20" type="text" value={functionString} onChange={(e) => setFunctionString(e.target.value)} />
            <svg className="child-element" width="29" height="20" viewBox="0 0 29 20" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M5.53409 19.2219C4.49834 19.2219 3.56025 18.9556 2.71982 18.4229C1.8853 17.8844 1.22242 17.0942 0.731179 16.0526C0.245857 15.005 0.00319609 13.7206 0.00319609 12.1996C0.00319609 10.6371 0.254735 9.33795 0.757812 8.3022C1.26089 7.26053 1.92969 6.48224 2.7642 5.96733C3.60464 5.4465 4.52498 5.18608 5.52521 5.18608C6.28871 5.18608 6.92495 5.31629 7.43395 5.5767C7.94886 5.8312 8.36316 6.1508 8.67685 6.53551C8.99645 6.9143 9.23911 7.28717 9.40483 7.65412H9.52024V0.818181H13.2933V19H9.56463V16.8161H9.40483C9.22727 17.1948 8.97573 17.5707 8.65021 17.9435C8.33061 18.3105 7.91335 18.6153 7.39844 18.858C6.88944 19.1006 6.26799 19.2219 5.53409 19.2219ZM6.7326 16.2124C7.34221 16.2124 7.85713 16.0466 8.27734 15.7152C8.70348 15.3778 9.029 14.9073 9.25391 14.3036C9.48473 13.6999 9.60014 12.9927 9.60014 12.1818C9.60014 11.371 9.48769 10.6667 9.26278 10.0689C9.03788 9.47112 8.71236 9.00947 8.28622 8.68395C7.86009 8.35843 7.34221 8.19567 6.7326 8.19567C6.11115 8.19567 5.58736 8.36435 5.16122 8.7017C4.73509 9.03906 4.41252 9.50663 4.19354 10.1044C3.97455 10.7022 3.86506 11.3946 3.86506 12.1818C3.86506 12.9749 3.97455 13.6763 4.19354 14.2859C4.41844 14.8896 4.741 15.363 5.16122 15.7063C5.58736 16.0437 6.11115 16.2124 6.7326 16.2124ZM19.5633 5.36364L22.0669 10.131L24.6325 5.36364H28.5122L24.5615 12.1818L28.6187 19H24.7568L22.0669 14.2859L19.4213 19H15.515L19.5633 12.1818L15.657 5.36364H19.5633Z" fill="black" />
            </svg>
          </div>
        </label>
      </div>
      <div>
        <label>
          Нижняя граница (a):
          <input type="number" value={a} onChange={(e) => setA(e.target.value)} />
        </label>
      </div>
      <div>
        <label>
          Верхняя граница (b):
          <input type="number" value={b} onChange={(e) => setB(e.target.value)} />
        </label>
      </div>
      <button onClick={fetchData}>Вычислить</button>
      {result && (
        <div>
          <h2>Result:</h2>
          <pre><BlockMath math={result} /></pre>
        </div>
      )}
      <div>
        <a href='http://127.0.0.1:5000/status'>
          <button > На сервер API-status</button>
        </a>
      </div>
    </div>
  );
}

export default App;
